// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/yue9944882/apiserver-builder-alpha-protobuf-example/pkg/apis/simple/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeepOneLister helps list DeepOnes.
type DeepOneLister interface {
	// List lists all DeepOnes in the indexer.
	List(selector labels.Selector) (ret []*v1.DeepOne, err error)
	// DeepOnes returns an object that can list and get DeepOnes.
	DeepOnes(namespace string) DeepOneNamespaceLister
	DeepOneListerExpansion
}

// deepOneLister implements the DeepOneLister interface.
type deepOneLister struct {
	indexer cache.Indexer
}

// NewDeepOneLister returns a new DeepOneLister.
func NewDeepOneLister(indexer cache.Indexer) DeepOneLister {
	return &deepOneLister{indexer: indexer}
}

// List lists all DeepOnes in the indexer.
func (s *deepOneLister) List(selector labels.Selector) (ret []*v1.DeepOne, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DeepOne))
	})
	return ret, err
}

// DeepOnes returns an object that can list and get DeepOnes.
func (s *deepOneLister) DeepOnes(namespace string) DeepOneNamespaceLister {
	return deepOneNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeepOneNamespaceLister helps list and get DeepOnes.
type DeepOneNamespaceLister interface {
	// List lists all DeepOnes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.DeepOne, err error)
	// Get retrieves the DeepOne from the indexer for a given namespace and name.
	Get(name string) (*v1.DeepOne, error)
	DeepOneNamespaceListerExpansion
}

// deepOneNamespaceLister implements the DeepOneNamespaceLister
// interface.
type deepOneNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeepOnes in the indexer for a given namespace.
func (s deepOneNamespaceLister) List(selector labels.Selector) (ret []*v1.DeepOne, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DeepOne))
	})
	return ret, err
}

// Get retrieves the DeepOne from the indexer for a given namespace and name.
func (s deepOneNamespaceLister) Get(name string) (*v1.DeepOne, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("deepone"), name)
	}
	return obj.(*v1.DeepOne), nil
}

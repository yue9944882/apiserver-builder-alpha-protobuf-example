// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	simplev1 "github.com/yue9944882/apiserver-builder-alpha-protobuf-example/pkg/apis/simple/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDeepOnes implements DeepOneInterface
type FakeDeepOnes struct {
	Fake *FakeSimpleV1
	ns   string
}

var deeponesResource = schema.GroupVersionResource{Group: "simple.io.example", Version: "v1", Resource: "deepones"}

var deeponesKind = schema.GroupVersionKind{Group: "simple.io.example", Version: "v1", Kind: "DeepOne"}

// Get takes name of the deepOne, and returns the corresponding deepOne object, and an error if there is any.
func (c *FakeDeepOnes) Get(name string, options v1.GetOptions) (result *simplev1.DeepOne, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(deeponesResource, c.ns, name), &simplev1.DeepOne{})

	if obj == nil {
		return nil, err
	}
	return obj.(*simplev1.DeepOne), err
}

// List takes label and field selectors, and returns the list of DeepOnes that match those selectors.
func (c *FakeDeepOnes) List(opts v1.ListOptions) (result *simplev1.DeepOneList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(deeponesResource, deeponesKind, c.ns, opts), &simplev1.DeepOneList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &simplev1.DeepOneList{ListMeta: obj.(*simplev1.DeepOneList).ListMeta}
	for _, item := range obj.(*simplev1.DeepOneList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested deepOnes.
func (c *FakeDeepOnes) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(deeponesResource, c.ns, opts))

}

// Create takes the representation of a deepOne and creates it.  Returns the server's representation of the deepOne, and an error, if there is any.
func (c *FakeDeepOnes) Create(deepOne *simplev1.DeepOne) (result *simplev1.DeepOne, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(deeponesResource, c.ns, deepOne), &simplev1.DeepOne{})

	if obj == nil {
		return nil, err
	}
	return obj.(*simplev1.DeepOne), err
}

// Update takes the representation of a deepOne and updates it. Returns the server's representation of the deepOne, and an error, if there is any.
func (c *FakeDeepOnes) Update(deepOne *simplev1.DeepOne) (result *simplev1.DeepOne, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(deeponesResource, c.ns, deepOne), &simplev1.DeepOne{})

	if obj == nil {
		return nil, err
	}
	return obj.(*simplev1.DeepOne), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeDeepOnes) UpdateStatus(deepOne *simplev1.DeepOne) (*simplev1.DeepOne, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(deeponesResource, "status", c.ns, deepOne), &simplev1.DeepOne{})

	if obj == nil {
		return nil, err
	}
	return obj.(*simplev1.DeepOne), err
}

// Delete takes name of the deepOne and deletes it. Returns an error if one occurs.
func (c *FakeDeepOnes) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(deeponesResource, c.ns, name), &simplev1.DeepOne{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDeepOnes) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(deeponesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &simplev1.DeepOneList{})
	return err
}

// Patch applies the patch and returns the patched deepOne.
func (c *FakeDeepOnes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *simplev1.DeepOne, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(deeponesResource, c.ns, name, pt, data, subresources...), &simplev1.DeepOne{})

	if obj == nil {
		return nil, err
	}
	return obj.(*simplev1.DeepOne), err
}

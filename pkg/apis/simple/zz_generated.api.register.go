/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package simple

import (
	"context"
	"fmt"

	simplecommon "github.com/yue9944882/apiserver-builder-alpha-protobuf-example/pkg/apis/simple/common"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
	"sigs.k8s.io/apiserver-builder-alpha/pkg/builders"
)

var (
	SimpleDeepOneStorage = builders.NewApiResource( // Resource status endpoint
		InternalDeepOne,
		func() runtime.Object { return &DeepOne{} },     // Register versioned resource
		func() runtime.Object { return &DeepOneList{} }, // Register versioned resource list
		&DeepOneStrategy{builders.StorageStrategySingleton},
	)
	InternalDeepOne = builders.NewInternalResource(
		"deepones",
		"DeepOne",
		func() runtime.Object { return &DeepOne{} },
		func() runtime.Object { return &DeepOneList{} },
	)
	InternalDeepOneStatus = builders.NewInternalResourceStatus(
		"deepones",
		"DeepOneStatus",
		func() runtime.Object { return &DeepOne{} },
		func() runtime.Object { return &DeepOneList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("simple.io.example").WithKinds(
		InternalDeepOne,
		InternalDeepOneStatus,
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
	}).AddToScheme
	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

type CustomType string
type SamplePrimitiveAlias int64

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type DeepOne struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   DeepOneSpec
	Status DeepOneStatus
}

type DeepOneSpec struct {
	FishRequired         int
	Sample               SampleElem
	SamplePointer        *SamplePointerElem
	SampleList           []SampleListElem
	SamplePointerList    []*SampleListPointerElem
	SampleMap            map[string]SampleMapElem
	SamplePointerMap     map[string]*SampleMapPointerElem
	SamplePrimitiveAlias SamplePrimitiveAlias
	Const                simplecommon.CustomType
	ConstPtr             *simplecommon.CustomType
	ConstSlice           []simplecommon.CustomType
	ConstMap             map[string]simplecommon.CustomType
}

type DeepOneStatus struct {
	ActualFish int
}

type SampleElem struct {
	Sub SampleSubElem
}

type SampleListElem struct {
	Sub []SampleListSubElem
}

type SampleListPointerElem struct {
	Sub []*SampleListPointerSubElem
}

type SampleListPointerSubElem struct {
	Foo string
}

type SampleListSubElem struct {
	Foo string
}

type SampleMapElem struct {
	Sub map[string]SampleMapSubElem
}

type SampleMapPointerElem struct {
	Sub map[string]*SampleMapPointerSubElem
}

type SampleMapPointerSubElem struct {
	Foo string
}

type SampleMapSubElem struct {
	Foo string
}

type SamplePointerElem struct {
	Sub *SamplePointerSubElem
}

type SamplePointerSubElem struct {
	Foo string
}

type SampleSubElem struct {
	Foo string
}

//
// DeepOne Functions and Structs
//
// +k8s:deepcopy-gen=false
type DeepOneStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type DeepOneStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type DeepOneList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []DeepOne
}

func (DeepOne) NewStatus() interface{} {
	return DeepOneStatus{}
}

func (pc *DeepOne) GetStatus() interface{} {
	return pc.Status
}

func (pc *DeepOne) SetStatus(s interface{}) {
	pc.Status = s.(DeepOneStatus)
}

func (pc *DeepOne) GetSpec() interface{} {
	return pc.Spec
}

func (pc *DeepOne) SetSpec(s interface{}) {
	pc.Spec = s.(DeepOneSpec)
}

func (pc *DeepOne) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *DeepOne) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc DeepOne) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store DeepOne.
// +k8s:deepcopy-gen=false
type DeepOneRegistry interface {
	ListDeepOnes(ctx context.Context, options *internalversion.ListOptions) (*DeepOneList, error)
	GetDeepOne(ctx context.Context, id string, options *metav1.GetOptions) (*DeepOne, error)
	CreateDeepOne(ctx context.Context, id *DeepOne) (*DeepOne, error)
	UpdateDeepOne(ctx context.Context, id *DeepOne) (*DeepOne, error)
	DeleteDeepOne(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewDeepOneRegistry(sp builders.StandardStorageProvider) DeepOneRegistry {
	return &storageDeepOne{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageDeepOne struct {
	builders.StandardStorageProvider
}

func (s *storageDeepOne) ListDeepOnes(ctx context.Context, options *internalversion.ListOptions) (*DeepOneList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*DeepOneList), err
}

func (s *storageDeepOne) GetDeepOne(ctx context.Context, id string, options *metav1.GetOptions) (*DeepOne, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*DeepOne), nil
}

func (s *storageDeepOne) CreateDeepOne(ctx context.Context, object *DeepOne) (*DeepOne, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*DeepOne), nil
}

func (s *storageDeepOne) UpdateDeepOne(ctx context.Context, object *DeepOne) (*DeepOne, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*DeepOne), nil
}

func (s *storageDeepOne) DeleteDeepOne(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}
